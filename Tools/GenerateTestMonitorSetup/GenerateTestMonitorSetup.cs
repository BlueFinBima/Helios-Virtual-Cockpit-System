using System.IO;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;

namespace GenerateTestMonitorSetup
{
    class GenerateTestMonitorSetup
    {
        private const int MAX_ROWS = 10;
        private const int MAX_COLUMNS = 25;

        private class Config
        {
            public int main_left = 1080;
            public int main_top = 0;
            public int main_width = 2560;
            public int main_height = 1440;
            public int grid_left = 1080 + 2560;
            public int grid_top = 0;
            public int cell_width = 100;
            public int cell_height = 100;
        };

        static void Main(string[] args)
        {
            List<string> lines = new List<string>();

            lines.Add("_  = function(p) return p; end;");
            lines.Add($"name = _('test_all_viewports')");
            lines.Add($"description = 'Generated by Helios {Assembly.GetEntryAssembly().GetName().Name} tool'");

            Config config = new Config();

            // XXX generate locals in the script and calculate all other values from it, so it can be adapted to other screens
            lines.Add("Viewports = {");
            lines.Add("  Center = {");
            lines.Add($"    x = {config.main_left},");
            lines.Add($"    y = {config.main_top},");
            lines.Add($"    width = {config.main_width},");
            lines.Add($"    height = {config.main_height},");
            lines.Add($"    aspect = {(double)config.main_width / (double)config.main_height},");
            lines.Add("    dx = 0,");
            lines.Add("    dy = 0");
            lines.Add("  }");
            lines.Add("}");


            int row = 0;
            int column = 0;

            // write standard viewports
            EmitViewports(lines, config, ref row, ref column, ToolsCommon.StandardViewports.Known);

            // write mod-created viewports
            EmitViewports(lines, config, ref row, ref column, ToolsCommon.ModViewports.Known, true);

            // main view
            lines.Add("UIMainView = Viewports.Center");
            lines.Add("GU_MAIN_VIEWPORT = Viewports.Center");

            WriteFile(lines);
        }

        private static void EmitViewports(List<string> lines, Config config, ref int row, ref int column, IList<ToolsCommon.ViewportTemplate> known, bool viewportPrefix = false)
        {
            if (row >= MAX_ROWS)
            {
                return;
            }
            foreach (ToolsCommon.ViewportTemplate template in known)
            {
                foreach (ToolsCommon.Viewport viewport in template.Viewports)
                {
                    lines.Add($"-- {template.DisplayName(viewport)}");
                    if (viewportPrefix)
                    {
                        lines.Add($"{template.ViewportPrefix}_{viewport.ViewportName} =");
                    }
                    else
                    {
                        lines.Add($"{viewport.ViewportName} =");
                    }
                    lines.Add("{");
                    lines.Add($"  x = {config.grid_left + column * config.cell_width},");
                    lines.Add($"  y = {config.grid_top + row * config.cell_height},");
                    lines.Add($"  width = {config.cell_width},");
                    lines.Add($"  height = {config.cell_height}");
                    lines.Add("}");
                    lines.Add("");

                    column++;
                    if (column >= MAX_COLUMNS)
                    {
                        column = 0;
                        row++;
                        if (row >= MAX_ROWS)
                        {
                            return;
                        }
                    }
                }
            }
        }

        private static void WriteFile(List<string> lines)
        {
            foreach (string line in lines)
            {
                Debug.WriteLine(line);
            }
            string text = string.Join("\n", lines);
            string outputPath = Path.Combine(GadrocsWorkshop.Helios.Util.KnownFolders.SavedGames, "DCS", "Config", "MonitorSetup", "test_all_viewports.lua");
            File.WriteAllText(outputPath, text);
        }
    }
}
